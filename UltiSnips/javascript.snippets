#
#  React snippets
#

snippet log
console.log(${0});
endsnippet

snippet c
const ${1} = ${0};
endsnippet

snippet l
let ${1} = ${0};
endsnippet

snippet exp
export default ${1}
endsnippet

snippet con
constructor(props) {
	super(props);
	${0}
}
endsnippet

snippet cdm "component did mount" b
componentDidMount() {
	${1}
},$0
endsnippet

snippet cdup "component did update" b
componentDidUpdate(prevProps, prevState) {
	${1}
},$0
endsnippet

snippet cwm "component will mount" b
componentWillMount() {
	${1}
},$0
endsnippet

snippet cwr "component will receive props" b
componentWillReceiveProps(nextProps) {
	${1}
},$0
endsnippet

snippet cwun "component will unmount" b
componentWillUnmount() {
	${1}
},$0
endsnippet

snippet cwu "component will update" b
componentWillUpdate(nextProps, nextState) {
	${1}
},$0
endsnippet

snippet fup
forceUpdate(${1:callback});
endsnippet

snippet gdp "get default props" b
getDefaultProps() {
	return {
		${1}: ${2}
	};
},$0
endsnippet

snippet gis "get initial state" b
getInitialState() {
	return {
		${1}: ${2}
	};
},$0
endsnippet

snippet ism "is mounted"
isMounted()
endsnippet

snippet pt "propTypes" b
propTypes: {
	${1}: PropTypes.${2:string}
},
endsnippet
snippet pts
PropTypes.string
endsnippet
snippet ptn
PropTypes.number
endsnippet
snippet pta
PropTypes.array
endsnippet
snippet pto
PropTypes.object
endsnippet
snippet pte
PropTypes.element
endsnippet
snippet ptb
PropTypes.bool
endsnippet
snippet ptf
PropTypes.func
endsnippet
snippet ptc
PropTypes.children = PropTypes.oneOfType([
	PropTypes.node,
	PropTypes.arrayOf(PropTypes.node),
]);
endsnippet

snippet imp
import ${1} from '${2}';
endsnippet
snippet impc
import {${1}} from '${2}';
endsnippet

snippet rimp "relative import" b
import ${1} from './$1';
endsnippet

snippet ren
render() {
	return (
		${1}
	);
}$0
endsnippet

snippet sst "set state" b
this.setState({
	${1}: ${2}
});$0
endsnippet

snippet scu "should component update"
shouldComponentUpdate(nextProps, nextState) {
	${1}
},$0
endsnippet

snippet dprops "get property" i
var { className, children } = this.props;
endsnippet

snippet dstate "get state" i
var { ${1} } = this.state;
endsnippet

# Redux Asynchronous Action Type
snippet rdxat
export const ${1:ACTION}_REQUEST = '$1_REQUEST';
export const $1_SUCCESS = '$1_SUCCESS';
export const $1_FAILURE = '$1_FAILURE';
endsnippet

snippet rdxsa "Redux synchoronous thunk action" b
export function ${1:action}(data) {
	return d => Promise.resolve(d({ type: ${2:ACTION}, data }))
}$0
endsnippet

snippet rdxaa "Redux asynchronous thunk action" b
export function ${1:action}(data) {
	return dispatch => {
		dispatch({ type: ${2:ACTION}_REQUEST })
		let promise = ${3:request}
		promise
			.then(data => dispatch({ type: $2_SUCCESS, data }))
			.catch(error => dispatch({ type: $2_FAILURE, error }))
		return promise
	}
}$0
endsnippet

snippet mstp "mapStateToProps" b
function mapStateToProps(state) {
	return {
		${1}
	}
}$0
endsnippet

snippet mdtp "mapDispatchToProps" b
function mapDispatchToProps(dispatch) {
	return {
		${1}
	}
}$0
endsnippet

snippet comp "Component" b
import React, {Component, PropTypes} from 'react';

class ${1:ClassName} extends Component {
	static propTypes = {
	};

	render() {
		return (
			$0
		);
	}
}

export default $1;
endsnippet

snippet comps "Stateless Component" b
import React, {PropTypes} from 'react';

function ${1:ClassName}(${2:\{${3}\}}) {
	return (
		$0
	)
}

$1.propTypes = {${3/,\s/,\n/g}};
export default $1;
endsnippet
	
snippet compr "Redux Component" b
import React, {Component, PropTypes} from 'react';
import {connect} from 'react-redux';

class ${1:ClassName} extends Component {
	static propTypes = {
	};

	render() {
		return (
			$0
		)
	}
}

function mapStateToProps(state) {
	return {};
}

export default connect(mapStateToProps, {
})($1);
endsnippet

snippet connect "Redux Connect"
export default connect(mapStateToProps, {
	$0
})(${1});
endsnippet

snippet rdxah "Redux Action Helpers" b
function createRequestTypes(base) {
	return [REQUEST, SUCCESS, FAILURE].reduce((act, type) => {
		act[type] = \`${base}_${type}\`;
		return act;
	}, {});
}

function action(type, payload = {}) {
	return {type, ...payload};
}
endsnippet

global !p
def camelToUpper(name):
	s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
	return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).upper()
def rdxfa(t):
	return (
		camelToUpper(t[1]),
		t[2].rstrip(',') + (', ' if len(t[2]) > 0 else ''),
		'{'+t[2].rstrip(',')+'}, ' if len(t[2]) > 0 else '',
		', {'+t[2].lstrip(',')+'}' if len(t[2]) > 0 else '',
	)
endglobal

# Redux Synchronous Action Type
snippet rdxst "Redux Synchronous Action" b
`!p t3 = camelToUpper(t[1])`export const `!p snip.rv = t3` = '`!p snip.rv = t3`';
export const ${1:action} = (${2:id}) => action(`!p snip.rv = t3`, {$2});
$0
endsnippet

snippet rdxfa "Redux Fetch Action" b
`!p t3, t4, t5, t6 = rdxfa(t)`export const `!p snip.rv = t3` = createRequestTypes('`!p snip.rv = t3`');
export const fetch${1:Action} = {
	request: (${2}) => action(`!p snip.rv = t3`.REQUEST`!p snip.rv = t6`),
	success: (`!p snip.rv = t5`response) => action(`!p snip.rv = t3`.SUCCESS, {`!p snip.rv = t4`response}),
	failure: (`!p snip.rv = t5`error) => action(`!p snip.rv = t3`.FAILURE, {`!p snip.rv = t4`error}),
	types: `!p snip.rv = t3`,
};
$0
endsnippet
